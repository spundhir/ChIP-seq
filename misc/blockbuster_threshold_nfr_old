#!/bin/bash
#PBS -l nodes=1:ppn=4

OUTDIR="optimizeThreshold";
NFRDIR="nfr"
GENOME="mm9"
OPTION=0

#### usage ####
usage() {
    echo
	echo Program: "blockbuster_threshold_nfr (determine optimal block group height required as a parameter to blockbuster while defining nucleosome free regions (NFRs))"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: blockbuster_threshold_nfr -i <file> -j <file> -k <file> -l <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [mapped reads in BAM format (replicate 1)]"
	echo " -j <file>   [mapped reads in BAM format (replicate 2)]"
    echo " -k <file>   [optimal histone peaks region (regionPeak file)]"
	echo " -l <file>   [optimal transcription factor (eg. cebpa) peaks region (regionPeak file)]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: ./optimizeThreshold)]"
    echo " -n <dir>    [input directory containing sizefactor files (default: ./nfr)]"
    echo " -g <file>   [genome: mm9 or hg19 (default: mm9)]"
    echo " -p <int>    [options to compute expression (default: 0)]"
    echo "             [0 -> total normalized expression]"
    echo "             [1 -> median normalized expression of block groups]"
    echo "             [2 -> median normalized expression of block]"
    echo "             [3 -> maximum normalized expression of block groups]"
    echo "             [4 -> maximum normalized expression of block]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:l:o:n:g:p:h ARG; do
	case "$ARG" in
		i) BAM_REP1=$OPTARG;;
		j) BAM_REP2=$OPTARG;;
		k) PEAKREGION=$OPTARG;;
		l) TFREGION=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        n) NFRDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        p) OPTION=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ ! -f "$BAM_REP1" -o ! -f "$BAM_REP2" -o ! -f "$PEAKREGION" -o ! -f "$TFREGION" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Create directory structure.. "
if [ ! -d "$OUTDIR" ]; then
    mkdir $OUTDIR
fi

if [ ! -d "$NFRDIR" ]; then
    mkdir $NFRDIR
    mkdir $NFRDIR/rep1/
    mkdir $NFRDIR/rep2/
fi
echo "done"

echo -n "Populating files based on input genome ($GENOME)... "
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
    EXCL_REGION="/home/pundhir/project/genome_annotations/ucscGenes_mm9_excl_NFR.bed.gz"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
    EXCL_REGION="/home/pundhir/project/genome_annotations/wgEncodeGencodeCompV19_hg19_excl_NFR.bed.gz"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi
echo done

echo -n "Create index of input BAM files.. "
if [ ! -e "$BAM_REP1.bai" ]; then
    samtools index $BAM_REP1
fi
if [ ! -e "$BAM_REP2.bai" ]; then
    samtools index $BAM_REP2
fi
echo "done"

echo -n "Compute size factor for each replicate.. "
if [ ! -e "$NFRDIR/sizeFactorCount" ]; then
    estimateSizeFactor.pl -o b -b $BAM_REP1,$BAM_REP2 -x $PEAKREGION -r $NFRDIR/sizeFactorCount
fi

if [ ! -e "$NFRDIR/sizeFactor" ]; then
    estimateSizeFactor.pl -o c -r $NFRDIR/sizeFactorCount > $NFRDIR/sizeFactor
fi
echo "done"

echo -n "Retrieve size factors to normalize the expression of reads from replicate 1 and 2... "
SIZEFACTOR_REP1=`head -n 1 $NFRDIR/sizeFactor | cut -f 2`;
SIZEFACTOR_REP2=`head -n 2 $NFRDIR/sizeFactor | tail -n 1 | cut -f 2`;
echo "done"

echo -n "Compute median length of histone peaks... "
HISTONE_MEDIAN_LENGTH=`bedStat.R -i $PEAKREGION | grep Median | sed 's/Median=//g'`
echo "done"

echo -e "$SIZEFACTOR_REP1\t$SIZEFACTOR_REP2\t$HISTONE_MEDIAN_LENGTH" > $OUTDIR/blockbuster_threshold.txt;

<<COMMENT1
COMMENT1
## TF peak analysis (replicate 1)
echo -n "Determine normalized read count for TF peaks (replicate 1)... "
for i in `zless $TFREGION | perl -ane 'print "$F[0]:$F[1]-$F[2]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP1 -k $SIZEFACTOR_REP1; done > $OUTDIR/tf.reads.rep1 &
echo "done"

echo -n "Determine normalized read count upstream to TF peaks (replicate 1)... "
for i in `zless $TFREGION | perl -ane '$start=$F[1]-'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$start-$F[1]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP1 -k $SIZEFACTOR_REP1; done > $OUTDIR/tf.reads.rep1.upstream &
echo "done"

echo -n "Determine normalized read count downstream to TF peaks (replicate 1)... "
for i in `zless $TFREGION | perl -ane '$end=$F[2]+'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$F[2]-$end\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP1 -k $SIZEFACTOR_REP1; done > $OUTDIR/tf.reads.rep1.downstream &
echo "done"

## TF peak analysis (replicate 2)
echo -n "Determine normalized read count for TF peaks (replicate 2)... "
for i in `zless $TFREGION | perl -ane 'print "$F[0]:$F[1]-$F[2]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP2 -k $SIZEFACTOR_REP2; done > $OUTDIR/tf.reads.rep2 &
echo "done"

echo -n "Determine normalized read count upstream to TF peaks (replicate 2)... "
for i in `zless $TFREGION | perl -ane '$start=$F[1]-'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$start-$F[1]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP2 -k $SIZEFACTOR_REP2; done > $OUTDIR/tf.reads.rep2.upstream &
echo "done"

echo -n "Determine normalized read count downstream to TF peaks (replicate 2)... "
for i in `zless $TFREGION | perl -ane '$end=$F[2]+'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$F[2]-$end\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP2 -k $SIZEFACTOR_REP2; done > $OUTDIR/tf.reads.rep2.downstream &
echo "done"

## shuffled transcription factor (tf; cebpa) peaks analysis (replicate 1)
zless $PEAKREGION $EXCL_REGION | cut -f 1,2,3 > $OUTDIR/EXCL_REGION.bed
zless $TFREGION | shuffleBed -noOverlapping -i stdin -g $GENOME_FILE -excl $OUTDIR/EXCL_REGION.bed > $OUTDIR/TFREGION.SHUFFLED

echo -n "Determine normalized read count for background shuffled peaks (replicate 1)... "
for i in `zless $OUTDIR/TFREGION.SHUFFLED | perl -ane 'print "$F[0]:$F[1]-$F[2]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP1 -k $SIZEFACTOR_REP1; done > $OUTDIR/bkg.reads.rep1 &
echo "done"

echo -n "Determine normalized read count upstream to background shuffled peaks (replicate 1)... "
for i in `zless $OUTDIR/TFREGION.SHUFFLED | perl -ane '$start=$F[1]-'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$start-$F[1]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP1 -k $SIZEFACTOR_REP1; done > $OUTDIR/bkg.reads.rep1.upstream &
echo "done"

echo -n "Determine normalized read count downstream to background shuffled peaks (replicate 1)... "
for i in `zless $OUTDIR/TFREGION.SHUFFLED | perl -ane '$end=$F[2]+'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$F[2]-$end\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP1 -k $SIZEFACTOR_REP1; done > $OUTDIR/bkg.reads.rep1.downstream &
echo "done"
echo "done"

## shuffled transcription factor (tf; cebpa) peaks analysis (replicate 2)
echo -n "Determine normalized read count for background shuffled peaks (replicate 2)... "
for i in `zless $OUTDIR/TFREGION.SHUFFLED | perl -ane 'print "$F[0]:$F[1]-$F[2]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP2 -k $SIZEFACTOR_REP2; done > $OUTDIR/bkg.reads.rep2 &
echo "done"

echo -n "Determine normalized read count upstream to background shuffled peaks (replicate 2)... "
for i in `zless $OUTDIR/TFREGION.SHUFFLED | perl -ane '$start=$F[1]-'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$start-$F[1]\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP2 -k $SIZEFACTOR_REP2; done > $OUTDIR/bkg.reads.rep2.upstream &
echo "done"

echo -n "Determine normalized read count downstream to background shuffled peaks (replicate 2)... "
for i in `zless $OUTDIR/TFREGION.SHUFFLED | perl -ane '$end=$F[2]+'$HISTONE_MEDIAN_LENGTH'; print "$F[0]:$F[2]-$end\n";'`; do coor2expr -p $OPTION -i $i -j $BAM_REP2 -k $SIZEFACTOR_REP2; done > $OUTDIR/bkg.reads.rep2.downstream &
echo "done"

wait_for_jobs_to_finish "Determine normalized read count for tf and suffled peaks in each replicate (replicate 1 and 2)"

echo -n "Making final output files (tf.reads.countStat and bkg.reads.countStat)... "
paste $OUTDIR/tf.reads.rep1.upstream $OUTDIR/tf.reads.rep2.upstream $OUTDIR/tf.reads.rep1 $OUTDIR/tf.reads.rep2 $OUTDIR/tf.reads.rep1.downstream $OUTDIR/tf.reads.rep2.downstream > $OUTDIR/tf.reads.countStat

paste $OUTDIR/bkg.reads.rep1.upstream $OUTDIR/bkg.reads.rep2.upstream $OUTDIR/bkg.reads.rep1 $OUTDIR/bkg.reads.rep2 $OUTDIR/bkg.reads.rep1.downstream $OUTDIR/bkg.reads.rep2.downstream > $OUTDIR/bkg.reads.countStat
echo "done"

echo -n "Plot distribution of normalized read counts for tf and background shuffled peaks... "
Rscript /home/pundhir/software/myScripts/PredictNFR_v0.01/blockbuster_threshold_nfr.R $OUTDIR/tf.reads.countStat $OUTDIR/bkg.reads.countStat $OUTDIR/blockbuster_threshold.pdf
echo "All done. Bye"
