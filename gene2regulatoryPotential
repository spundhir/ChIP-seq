#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"
MIN_N_CLASS=1

#### usage ####
usage() {
	echo Program: "gene2regulatoryPotential (compute regulatory potential for input genes in BED format)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2regulatoryPotential -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input gene coordinates in BED format]"
    echo "             [format: chr start end name score strand (..)]"
	echo " -j <file>   [input enhancer coordinates in BED format (can be stdin)]"
    echo "             [format: chr start end name score strand class (..)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -c          [perform separate analysis for each enhancer class]"
    echo " -n <int>    [minimum number of enhancers within each class (default: 1)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:cnh ARG; do
    case "$ARG" in
    i) GENE_FILE=$OPTARG;;
    j) ENHANCER_FILE=$OPTARG;;
    g) GENOME=$OPTARG;;
    c) CLASS=1;;
    n) MIN_N_CLASS=$OPTARG;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ ! -f "$GENE_FILE" -o -z "$ENHANCER_FILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi

## create temporary BED file if input is from stdin
if [ "$ENHANCER_FILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    ENHANCER_FILE=$TMP
fi

## reformat gene file
TMP_GENE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
zless $GENE_FILE | bed2window -i stdin -w 1 -t > $TMP_GENE
GENE_FILE=$TMP_GENE

## perform gene centric analysis
NCOL_GENE_FILE=$(head -n 1 $GENE_FILE | perl -ane 'print scalar(@F);')
NCOL_ENHANCER_FILE=$(head -n 1 $ENHANCER_FILE | perl -ane 'print scalar(@F);')
#echo -e "$NCOL_GENE_FILE\t$NCOL_ENHANCER_FILE"; exit

if [ $NCOL_GENE_FILE -lt 6 -o $NCOL_ENHANCER_FILE -lt 6 ]; then
    echo
    echo "Error: format of gene or enhancer file is not accurate"
    usage
fi

COMMAND="paste $GENE_FILE"

TMP_ENHANCER=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
if [ ! -z "$CLASS" ]; then
    COUNT=1
    for CLASS in $(cat $ENHANCER_FILE | cut -f 7 | sort | uniq -c | sed -E 's/^\s+//g' | perl -ane 'if($F[0]>='$MIN_N_CLASS') { print "$F[1]\n"; }'); do
        cat $ENHANCER_FILE | perl -ane 'if($F[6]=~/^'$CLASS'$/) { print $_; }' | cut -f 1-6 > $TMP_ENHANCER.$COUNT
        bed2weightedSignal -i $GENE_FILE -j $TMP_ENHANCER.$COUNT -g $GENOME -y | cut -f $(($NCOL_GENE_FILE+1)),$(($NCOL_GENE_FILE+2)) > $TMP_ENHANCER.$COUNT.RC
        COMMAND="$COMMAND $TMP_ENHANCER.$COUNT.RC"
        COUNT=$(($COUNT+1))
    done
else
    bed2weightedSignal -i $GENE_FILE -j $ENHANCER_FILE -g $GENOME -y | cut -f $(($NCOL_GENE_FILE+1)),$(($NCOL_GENE_FILE+2)) > $TMP_ENHANCER.RC
    COMMAND="$COMMAND $TMP_ENHANCER.RC"
fi
#echo $COMMAND
eval $COMMAND

## remove temporary file
if [ ! -z "$TMP" ]; then
    rm $TMP
fi
rm $TMP_GENE
rm $TMP_ENHANCER*
