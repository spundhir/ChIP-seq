#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"

#### usage ####
usage() {
	echo Program: "coor2reads (given a coordinate, extract reads from one or more bam files)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: nfrAna -c <coor> -b <file(s)> -n <float> "
	echo "Options:"
	echo " -c <coor>   [genomic coordinate like 'chr:start-end' format]"
    echo " -b <file>   [input mapped reads in BAM format]"
    echo "             [if multiple seperate by a comma]"
    echo "[OPTIONS]"
    echo " -s <float>  [normalize expression by input size factor (RLE)]"
    echo "             [if multiple, seperate them by a comma]"
    echo " -m <int>    [normalize expression by input count of mapped reads (RPM)]"
    echo "             [if multiple, seperate them by a comma]"
    echo " -d          [remove duplicate reads]"
    echo " -e <int>    [extend 3' end of reads by input number of bases (useful for ChIP-seq data)]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts c:b:s:m:de:g:h ARG; do
	case "$ARG" in
		c) COOR=$OPTARG;;
        b) INPUTBAMFILES=$OPTARG;;
        s) INPUTSIZEFACTORS=$OPTARG;; 
        m) INPUTMAPPEDREADS=$OPTARG;;
        d) REMOVE_DUPLICATE=1;;
        e) INPUTEXTENDS=$OPTARG;;
        g) GENOME=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ ! "$COOR" -o ! "$INPUTBAMFILES" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi

## parse input bam files in an array
IFS=","
BAMFILES=($INPUTBAMFILES)
BAMFILES_COUNT=${#BAMFILES[@]}
IFS=""

## initialize size factors, if both size factors and total reads not provided
if [ -z "$INPUTSIZEFACTORS" -a -z "$INPUTMAPPEDREADS" ]; then
    INPUTSIZEFACTORS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        INPUTSIZEFACTORS="$INPUTSIZEFACTORS,1"
    done
    INPUTSIZEFACTORS=`echo $INPUTSIZEFACTORS | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## initialize extend parameter, if not provided
if [ -z "$INPUTEXTENDS" ]; then
    INPUTEXTENDS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        INPUTEXTENDS="$INPUTEXTENDS,0"
    done
    INPUTEXTENDS=`echo $INPUTEXTENDS | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## parse extend parameter in an array
IFS=","
EXTENDS=($INPUTEXTENDS)
EXTENDS_COUNT=${#EXTENDS[@]}
IFS=""

if [ ! -z "$INPUTSIZEFACTORS" ]; then
    ## parse input size factors in an array
    IFS=","
    SIZEFACTORS=($INPUTSIZEFACTORS)
    SIZEFACTORS_COUNT=${#SIZEFACTORS[@]}
    IFS=""

    if [ "$BAMFILES_COUNT" -ne "$SIZEFACTORS_COUNT" -o "$BAMFILES_COUNT" -ne "$EXTENDS_COUNT" ]; then
        echo -n "Please provide size factor and extend parameter for each input bam file";
        usage
    fi

    if [ -z "$REMOVE_DUPLICATE" ]; then
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do samtools view -b ${BAMFILES[$i]} $COOR | bedtools bamtobed -i - | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r ${EXTENDS[$i]} | perl -ane '$F[4]=sprintf("%0.2f", 1/'${SIZEFACTORS[$i]}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\n";'; done | sortBed -i stdin
    else
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do samtools view -b ${BAMFILES[$i]} $COOR | bedtools bamtobed -i - | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r ${EXTENDS[$i]} | perl -ane '$F[4]=sprintf("%0.2f", 1/'${SIZEFACTORS[$i]}'); print "$F[0]\t$F[1]\t$F[2]\tTAG\t$F[4]\t$F[5]\n";' | sortBed -i stdin | uniq; done | sortBed -i stdin
    fi
else
    ## parse input count of mapped reads in an array
    IFS=","
    MAPPEDREADS=($INPUTMAPPEDREADS)
    MAPPEDREADS_COUNT=${#MAPPEDREADS[@]}
    IFS=""

    if [ "$BAMFILES_COUNT" -ne "$MAPPEDREADS_COUNT" -o "$BAMFILES_COUNT" -ne "$EXTENDS_COUNT" ]; then
        echo -n "Please provide total mapped reads and extend parameter for each input bam file";
        usage
    fi

    if [ -z "$REMOVE_DUPLICATE" ]; then
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do
            if [ "${MAPPEDREADS[$i]}" -eq 1 ]; then
                MAPPEDREADS[$i]=$(samtools idxstats ${BAMFILES[$i]} | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }');
            fi
            samtools view -b ${BAMFILES[$i]} $COOR | bedtools bamtobed -i - | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r ${EXTENDS[$i]} | perl -ane '$F[4]=sprintf("%0.2f", ((1*1000000)/'${MAPPEDREADS[$i]}')); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\n";';
        done | sortBed -i stdin
    else
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do
            if [ "${MAPPEDREADS[$i]}" -eq 1 ]; then
                MAPPEDREADS[$i]=$(samtools idxstats ${BAMFILES[$i]} | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }');
                #MAPPEDREADS[$i]=$(bedtools bamtobed -i ${BAMFILES[$i]} | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r ${EXTENDS[$i]} | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\tTAG\t1\t$F[5]\n";' | sortBed -i stdin | uniq | wc -l);
            fi
            samtools view -b ${BAMFILES[$i]} $COOR | bedtools bamtobed -i - | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r ${EXTENDS[$i]} | perl -ane '$F[4]=sprintf("%0.2f", ((1*1000000)/'${MAPPEDREADS[$i]}')); print "$F[0]\t$F[1]\t$F[2]\tTAG\t$F[4]\t$F[5]\n";' | sortBed -i stdin | uniq;
        done | sortBed -i stdin
    fi
fi
exit
