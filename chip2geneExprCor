#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"

#### usage ####
usage() {
	echo Program: "chip2geneExprCor (correlate gene expression with ChIP-seq defined peaks or NFRs)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: chip2geneExprCor -i <file> -j <file(s)>"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinate of peaks or NFRs in BED format (can be stdin)]"
    echo " -j <file>   [input file containing gene expression values]"
    echo " -k <int>    [number of samples for which gene expression has been computed]"
    echo " -n          [also show enhancers having no proximal genes]"
    echo " -c          [associate enhancers to closest gene instead to collapsed gene(s)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:ncg:h ARG; do
	case "$ARG" in
		i) INPUTCHIPFILE=$OPTARG;;
        j) INPUTEXPRFILE=$OPTARG;;
        k) NSAMPLES=$OPTARG;; 
        n) SHOWNULL=1;;
        c) CLOSESTGENE=1;;
        g) GENOME=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTCHIPFILE" -o -z "$INPUTEXPRFILE" -o -z "$NSAMPLES" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi

## compute number of columns in input chip file
if [ "$INPUTCHIPFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do echo ${LINE}; done | perl -ane '$line=(); foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n"; '> $TMP
    INPUTCHIPFILE=$TMP
fi

NCOL_CHIP=$(cat $INPUTCHIPFILE | head -n 1 | perl -ane 'print scalar(@F);')
NCOL_EXPR=$(cat $INPUTEXPRFILE | head -n 1 | perl -ane 'print scalar(@F);')

## old code used in CEBPA project
#COL_EXPR=$(perl -e '$col="5,13,"; $end='$NCOL_CHIP'+'$NCOL_EXPR'; $start=$end-'$NSAMPLES'; for($i=$start+1; $i<=$end; $i++) { $col.="$i,"; } $col=~s/\,$//g; print $col;')
COL_EXPR=$(perl -e '$col=sprintf("%s,%d,", 5,'$NCOL_CHIP'+4); $end='$NCOL_CHIP'+'$NCOL_EXPR'; $start=$end-'$NSAMPLES'; for($i=$start+1; $i<=$end; $i++) { $col.="$i,"; } $col=~s/\,$//g; print $col;')

COL_OUT=$(perl -e '$col="distinct,distinct,"; $end='$NCOL_CHIP'+'$NCOL_EXPR'; $start=$end-'$NSAMPLES'; for($i=$start; $i<$end; $i++) { $col.="sum,"; } $col=~s/\,$//g; print $col;')

if [ -z "$CLOSESTGENE" -a -z "$SHOWNULL" ]; then
    #echo "intersectBed -a $INPUTCHIPFILE -b <(cat $INPUTEXPRFILE | perl -ane '\$start='$NCOL_EXPR'-'$NSAMPLES'; \$end='$NCOL_EXPR'-1; \$sum=0; foreach(@F[\$start..\$end]) { \$sum+=\$_; } if(\$sum>=0) { print \$_; }') -wo | sortBed -i stdin | mergeBed -i stdin -c $COL_EXPR -o $COL_OUT"; exit
    intersectBed -a $INPUTCHIPFILE -b <(cat $INPUTEXPRFILE | perl -ane '$start='$NCOL_EXPR'-'$NSAMPLES'; $end='$NCOL_EXPR'-1; $sum=0; foreach(@F[$start..$end]) { $sum+=$_; } if($sum>=0) { print $_; }') -wo | sortBed -i stdin | mergeBed -i stdin -c $COL_EXPR -o $COL_OUT
elif [ -z "$CLOSESTGENE" ]; then
    #echo "$COL_EXPR $COL_OUT $NCOL_EXPR $NSAMPLES"; exit
    intersectBed -a $INPUTCHIPFILE -b <(cat $INPUTEXPRFILE | perl -ane '$start='$NCOL_EXPR'-'$NSAMPLES'; $end='$NCOL_EXPR'-1; $sum=0; foreach(@F[$start..$end]) { $sum+=$_; } if($sum>=0) { print $_; }') -wao | sortBed -i stdin | mergeBed -i stdin -c $COL_EXPR -o $COL_OUT
else
    #echo "$COL_EXPR $COL_OUT $NCOL_CHIP $NCOL_EXPR $NSAMPLES"; exit
    #intersectBed -a $INPUTCHIPFILE -b $INPUTEXPRFILE -loj | sortBed -i stdin | mergeBed.pl -i - -c | cut -f 1-3,$COL_EXPR | perl -ane '$end=scalar(@F); $start=$end-'$NSAMPLES'; if($_=~/\s+\.\s+/) { for($i=$start; $i<$end; $i++) { $F[$i]=0; }  $line=(); foreach(@F) { $line.="$_\t"; } $line=~s/\t+$//g; print "$line\n"; } else { print "$_"; }' 
    ## Required when using with nfrDynAna2Matrix script
    closestBed -a $INPUTCHIPFILE -b <(sortBed -i $INPUTEXPRFILE) -t first | cut -f 1-3,$COL_EXPR
    #closestBed -a $INPUTCHIPFILE -b <(sortBed -i $INPUTEXPRFILE) -t first | cut -f 1-$NCOL_CHIP,$COL_EXPR
fi

if [ ! -z "$TMP" ]; then
    rm $TMP
fi
exit
