#!/bin/bash
#PBS -l nodes=1:ppn=4

## DEPENDENCIES
GENOME="mm9"
EXTEND_VALUE=0

#### usage ####
usage() {
	echo Program: "bam2bwForChIP (convert bam to bigWig format with read extension)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bam2bwForChIP -i <file> [OPTIONS]"
    echo "[INPUT]"
	echo " -i <file>   [input BAM file]"
	echo "[OPTIONS]:"
    echo " -o <dir>    [output directory (default: bam file location)]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -k          [keep bedGraph file also]"
    echo " -e          [extend 3' end of reads (useful for ChIP-seq data)]"
    echo " -s          [scale the coverage to TPM]"
    echo " -z <float>  [scale the coverage by input size factor (computed using DESeq2)]"
    echo " -b          [also output the BED file]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:g:kesbz:h ARG; do
	case "$ARG" in
		i) BAMFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        k) KEEP=1;;
        e) EXTEND=1;;
        s) SCALE=1;;
        z) SIZEFACTOR=$OPTARG;;
        b) BED=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ ! -f "$BAMFILE" -o "$HELP" ]; then
	usage
fi

echo -n "Populating files based on input genome, $GENOME (`date`).. "
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
    GENOME_MACS2="mm"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
    GENOME_MACS2="hs"
else
    echo "Presently the program only support analysis for mm9 or hg19"
echo
    usage
fi
echo done

<<"COMMENT"
COMMENT

## determine read extension parameter, if required
if [ ! -z "$EXTEND" ]; then
    echo -n "Determing read extension parameter (`date`).. "
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    macs2 predictd -i $BAMFILE -g $GENOME_MACS2 &>$TMP
    EXTEND_VALUE=$(cat $TMP | grep "predicted fragment length" | perl -ane 'print $F[scalar(@F)-2];')

    if [ -z "$EXTEND_VALUE" ]; then
        echo
        echo "Extend value is not computed correctly.. exiting"
        echo
        exit
    fi

    if [ ! -z "$TMP" ]; then
        rm $TMP
    fi

    echo "$EXTEND_VALUE - done"
fi

## retrieve file name
echo -n "Converting bam to bigwig format (`date`).. "
if [ ! -z "$OUTDIR" ]; then
    if [ ! -d "$OUTDIR" ]; then
        mkdir -p $OUTDIR
    fi

    ID=`echo $BAMFILE | perl -ane '$_=~s/^.+\///g; $_=~s/\..+$//g; print $_;'`;

    ## create bigwig files for viualization at the UCSC genome browser
    if [ ! -z "$SCALE" ]; then
        #MAPPEDREADS=`samtools idxstats $BAMFILE | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }'`;
        #SCALE_FACTOR=$(echo $MAPPEDREADS | perl -ane 'printf("%0.6f", 1000000/'$MAPPEDREADS');')
        #EXTEND_VALUE=$(echo $EXTEND_VALUE | perl -ane 'printf("%0.0f", $_/2);')
        #bedtools bamtobed -i $BAMFILE -bed12 | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r $EXTEND_VALUE | bedtools genomecov -bg -i stdin -g $GENOME_FILE -split -scale $SCALE_FACTOR > $OUTDIR/$ID.bedGraph

        ## use deeptools instead
        bamCoverage -b $BAMFILE -o $ID.bw -of bigwig --ignoreDuplicates --normalizeUsingRPKM -e $EXTEND_VALUE
    elif [ ! -z "$SIZE_FACTOR" ]; then
        SCALE_FACTOR=$(echo $SIZE_FACTOR | perl -ane 'printf("%0.6f", 1/$_);')
        bedtools bamtobed -i $BAMFILE -bed12 | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r $EXTEND_VALUE | bedtools genomecov -bg -i stdin -g $GENOME_FILE -split -scale $SCALE_FACTOR > $OUTDIR/$ID.bedGraph
    else
        bedtools bamtobed -i $BAMFILE -bed12 | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r $EXTEND_VALUE | bedtools genomecov -bg -i stdin -g $GENOME_FILE -split > $OUTDIR/$ID.bedGraph
    fi

    if [ -e "$ID.bedGraph" ]; then
        bedGraphToBigWig $OUTDIR/$ID.bedGraph $GENOME_FILE $OUTDIR/$ID.bw

        if [ -z "$KEEP" ]; then
            rm $OUTDIR/$ID.bedGraph 
        fi
    fi
else
    ID=`echo $BAMFILE | perl -ane '$_=~s/\.bam*//g; print $_;'`;

    ## create bigwig files for viualization at the UCSC genome browser
    if [ ! -z "$SCALE" ]; then
        #MAPPEDREADS=`samtools idxstats $BAMFILE | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }'`;
        #SCALE_FACTOR=$(echo $MAPPEDREADS | perl -ane 'printf("%0.6f", 1000000/'$MAPPEDREADS');')
        #EXTEND_VALUE=$(echo $EXTEND_VALUE | perl -ane 'printf("%0.0f", $_/2);')
        #bedtools bamtobed -i $BAMFILE -bed12 | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r $EXTEND_VALUE | bedtools genomecov -bg -i stdin -g $GENOME_FILE -split -scale $SCALE_FACTOR > $ID.bedGraph

        ## use deeptools instead
        bamCoverage -b $BAMFILE -o $ID.bw -of bigwig --ignoreDuplicates --normalizeUsingRPKM -e $EXTEND_VALUE
    elif [ ! -z "$SIZE_FACTOR" ]; then
        SCALE_FACTOR=$(echo $SIZE_FACTOR | perl -ane 'printf("%0.6f", 1/$_);')
        bedtools bamtobed -i $BAMFILE -bed12 | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r $EXTEND_VALUE | bedtools genomecov -bg -i stdin -g $GENOME_FILE -split -scale $SCALE_FACTOR > $ID.bedGraph
    else
        bedtools bamtobed -i $BAMFILE -bed12 | bedtools slop -i stdin -g $GENOME_FILE -s -l 0 -r $EXTEND_VALUE | bedtools genomecov -bg -i stdin -g $GENOME_FILE -split > $ID.bedGraph

    fi

    if [ -e "$ID.bedGraph" ]; then
        bedGraphToBigWig $ID.bedGraph $GENOME_FILE $ID.bw

        if [ -z "$KEEP" ]; then
            rm $ID.bedGraph 
        fi
    fi
fi

if [ ! -z "$BED" ]; then
    ID=`echo $BAMFILE | perl -ane '$_=~s/\.bam*//g; print $_;'`;
    bedtools bamtobed -i $BAMFILE > $ID.bed
fi
echo "done"

#bigWigCmd = "./src/bamToBed -i " + name + "/mapped.bam " + "| ./src/slopBed -i stdin -g src/" + chromFile + " -s -l -0 -r " + str(args.fragment_length[0]-readLength) + " | ./src/genomeCoverageBed -bg -i stdin -g src/" + chromFile + "| ./src/wigToBigWig stdin src/" + chromFile + " " + name + "/mapped.bw"
